{"version":3,"sources":["webpack:///./src/app/auth/forgot/forgot.component.html","webpack:///./src/app/auth/login/login.component.html","webpack:///./src/app/auth/reset/reset.component.html","webpack:///./src/app/auth/forgot/forgot.component.css","webpack:///./src/app/auth/forgot/forgot.component.ts","webpack:///./src/app/auth/login/login.component.css","webpack:///./src/app/auth/login/login.component.ts","webpack:///./src/app/auth/reset/reset.component.css","webpack:///./src/app/auth/reset/reset.component.ts","webpack:///./src/app/layouts/auth-layout/auth-layout.module.ts","webpack:///./src/app/layouts/auth-layout/auth-layout.routing.ts"],"names":[],"mappings":";;;;;;;;;AAAA,qxBAAqxB,6BAA6B,gQAAgQ,oCAAoC,qe;;;;;;;;;;;ACAtlC,4wBAA4wB,6BAA6B,gQAAgQ,oCAAoC,ghBAAghB,4BAA4B,6e;;;;;;;;;;;ACAznD,0zBAA0zB,gCAAgC,4OAA4O,sDAAsD,kkBAAkkB,gCAAgC,+NAA+N,gCAAgC,4e;;;;;;;;;;;ACA79D,+DAA+D,mJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAb;AACV;AACyC;AACrC;AACI;AAOhD;IAEE,yBAAoB,MAAc,EAAU,EAAe,EAAU,GAAc,EAAU,KAAkB;QAA3F,WAAM,GAAN,MAAM,CAAQ;QAAU,OAAE,GAAF,EAAE,CAAa;QAAU,QAAG,GAAH,GAAG,CAAW;QAAU,UAAK,GAAL,KAAK,CAAa;IAAI,CAAC;IAEpH,kCAAQ,GAAR;QACE,IAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,EAAC;YACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;SAClD;QACD,gBAAgB;QAChB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAG;YAChC,KAAK,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,mDAAmD,CAAC,CAAC,CAAC,CAAC;SAClI,CAAC,CAAC;IACL,CAAC;IAED,gCAAM,GAAN,UAAO,QAAY;QAAnB,iBAYC;QAXC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAC,QAAQ,CAAC,CAAC;QACjC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,0BAA0B,EAAE,QAAQ,CAAC,CAAC,SAAS,CAAC,gBAAM;YAChF,IAAG,MAAM,CAAC,MAAM,IAAI,SAAS,EAAC;gBAC5B,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;gBACpC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;aACvD;iBAAM;gBACL,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;aACvD;QACH,CAAC,EAAE,UAAC,GAAG;YACL,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,sCAAsC,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QACnF,CAAC,CAAC;IACJ,CAAC;IA1BU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;YACtB,yJAAsC;;SAEvC,CAAC;yCAG4B,sDAAM,EAAc,0DAAW,EAAc,0DAAU,EAAiB,6DAAW;OAFpG,eAAe,CA2B3B;IAAD,sBAAC;CAAA;AA3B2B;;;;;;;;;;;;ACX5B,+DAA+D,+I;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAb;AACV;AACyC;AACrC;AACI;AAMhD;IAGE,wBAAoB,MAAc,EAAU,EAAe,EAAU,GAAc,EAAU,KAAkB;QAA3F,WAAM,GAAN,MAAM,CAAQ;QAAU,OAAE,GAAF,EAAE,CAAa;QAAU,QAAG,GAAH,GAAG,CAAW;QAAU,UAAK,GAAL,KAAK,CAAa;QAD/G,gBAAW,GAAG,KAAK;IACgG,CAAC;IAEpH,iCAAQ,GAAR;QACE,IAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,EAAC;YACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;SAClD;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAG;YAChC,KAAK,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,mDAAmD,CAAC,CAAC,CAAC,CAAC;YACjI,QAAQ,EAAE,CAAC,IAAI,EAAG,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC/D,CAAC,CAAC;QACH,YAAY,CAAC,KAAK,EAAE;QACpB,cAAc,CAAC,KAAK,EAAE;IACtB,CAAC;IAED,8BAAK,GAAL,UAAO,QAAY;QAClB,2BAA2B;QAC1B,yBAAyB;QAF3B,iBAaC;QATC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,gBAAM;YACvC,IAAI,MAAM,CAAC,MAAM,IAAI,SAAS,EAAE;gBAC9B,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;aAClD;iBAAM;gBACL,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,+CAA+C,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;aAC3F;QACH,CAAC,EAAE,UAAC,GAAG;YACL,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;QACpB,CAAC,CAAC;IACJ,CAAC;IA9BU,cAAc;QAL1B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,sJAAqC;;SAEtC,CAAC;yCAI4B,sDAAM,EAAc,0DAAW,EAAc,0DAAU,EAAiB,6DAAW;OAHpG,cAAc,CAgC1B;IAAD,qBAAC;CAAA;AAhC0B;;;;;;;;;;;;ACV3B,+DAA+D,+I;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAb;AACa;AACkC;AACrD;AACI;AAOhD;IAKE,wBAAoB,GAAc,EAAU,EAAe,EAAU,KAAkB,EAAU,MAAc,EAAU,cAA8B;QAAnI,QAAG,GAAH,GAAG,CAAW;QAAU,OAAE,GAAF,EAAE,CAAa;QAAU,UAAK,GAAL,KAAK,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAFvJ,WAAM,GAAW,EAAE;QACnB,kBAAa,GAAQ,SAAS;IAC4H,CAAC;IAE3J,iCAAQ,GAAR;QAAA,iBAeC;QAdC,IAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,EAAC;YACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;SAClD;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAE;YAC9B,QAAQ,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAE,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAE,CAAC,CAAC;YACrG,eAAe,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAE,yDAAU,CAAC,QAAQ,CAAE,CAAC,CAAC;SACrE,EAAE;YACD,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,yBAAyB;SAC1D,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,MAAc;YAClD,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE;YACvB,OAAO,CAAC,GAAG,CAAC,KAAI,CAAC,MAAM,CAAC;QAC1B,CAAC,CAAC;IACJ,CAAC;IAEA,4BAA4B;IAC5B,wCAAe,GAAf,UAAgB,OAAwB;QACvC,IAAI,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK;QAC5C,IAAI,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,KAAK;QAC1D,IAAI,QAAQ,KAAK,eAAe,EAAE;YAC9B,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,SAAS,CAAE,EAAC,eAAe,EAAE,IAAI,EAAC,CAAE;SACtE;aAAI;YACH,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAED,8BAAK,GAAL,UAAM,QAAY;QAAlB,iBAYC;QAXC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,yBAAyB,EAAE,QAAQ,CAAC,CAAC,SAAS,CAAC,gBAAM;YAC/E,IAAG,MAAM,CAAC,MAAM,IAAI,SAAS,EAAC;gBAC5B,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gEAAgE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBAC3G,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;aACtC;iBAAM;gBACL,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;aAC/D;QACH,CAAC,EAAE,UAAC,GAAG;YACL,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;QACpB,CAAC,CAAC;IACJ,CAAC;IA/CU,cAAc;QAL1B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,sJAAqC;;SAEtC,CAAC;yCAMwB,0DAAU,EAAc,0DAAW,EAAiB,6DAAW,EAAkB,sDAAM,EAA0B,8DAAc;OAL5I,cAAc,CAgD1B;IAAD,qBAAC;CAAA;AAhD0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXc;AACM;AACA;AACmB;AACT;AACS;AACG;AACH;AAWvC;AAuB3B;IAAA;IAA+B,CAAC;IAAnB,gBAAgB;QAtB5B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,4DAAY,CAAC,QAAQ,CAAC,qEAAgB,CAAC;gBACvC,0DAAW;gBACX,kEAAmB;gBACnB,iEAAe;gBACf,iEAAe;gBACf,oEAAkB;gBAClB,gEAAc;gBACd,iEAAe;gBACf,kEAAgB;gBAChB,+DAAa;gBACb,0EAAwB;aACzB;YACD,YAAY,EAAE;gBACZ,0EAAc;gBACd,6EAAe;gBACf,0EAAc;aACf;SACF,CAAC;OAEW,gBAAgB,CAAG;IAAD,uBAAC;CAAA;AAAH;;;;;;;;;;;;;ACvC7B;AAAA;AAAA;AAAA;AAAA;AAAkE;AACG;AACH;AAE3D,IAAM,gBAAgB,GAAW;IACpC,EAAE,IAAI,EAAE,OAAO,EAAO,SAAS,EAAE,0EAAc,EAAE;IACjD,EAAE,IAAI,EAAE,QAAQ,EAAM,SAAS,EAAE,6EAAe,EAAE;IAClD,EAAE,IAAI,EAAE,WAAW,EAAG,SAAS,EAAE,0EAAc,EAAE;CACpD,CAAC","file":"layouts-auth-layout-auth-layout-module.js","sourcesContent":["module.exports = \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n  <form class=\\\"example-form\\\" [formGroup]=\\\"forgotForm\\\" (ngSubmit)=\\\"forgot(forgotForm.value)\\\">\\r\\n    <mat-card class=\\\"example-card\\\">\\r\\n     <mat-card-header>\\r\\n       <mat-card-title>Forgot Password</mat-card-title>\\r\\n     </mat-card-header>\\r\\n     <mat-card-content>\\r\\n         <div class=\\\"form-group\\\">\\r\\n           <mat-form-field class=\\\"example-full-width\\\">\\r\\n           <input matInput placeholder=\\\"Email ID\\\" formControlName=\\\"email\\\" name=\\\"email\\\">\\r\\n           <mat-error class=\\\"error--handing\\\"\\r\\n              *ngIf=\\\"forgotForm.controls['email'].hasError('required') && (forgotForm.controls['email'].dirty || forgotForm.controls['email'].touched)\\\">\\r\\n              {{ \\\"Email Id is required.\\\" }}\\r\\n            </mat-error>\\r\\n            <mat-error class=\\\"error--handing\\\"\\r\\n              *ngIf=\\\"forgotForm.controls['email'].hasError('pattern') && (forgotForm.controls['email'].dirty || forgotForm.controls['email'].touched)\\\">\\r\\n              {{ \\\"Please Enter valid email Id.\\\" }}\\r\\n            </mat-error>\\r\\n           </mat-form-field>\\r\\n         </div>\\r\\n       <mat-spinner [style.display]=\\\"showSpinner ? 'block' : 'none'\\\"></mat-spinner>\\r\\n     </mat-card-content>\\r\\n     <mat-card-actions>\\r\\n       <button mat-raised-button [disabled]=\\\"!forgotForm.valid\\\" color=\\\"primary\\\">Submit</button>\\r\\n     </mat-card-actions>\\r\\n     <a class=\\\"auth-navigate\\\" [routerLink]=\\\"['/', 'login']\\\">Back to login</a>\\r\\n   </mat-card>\\r\\n  </form>\\r\\n</div>\\r\\n\"","module.exports = \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n    <form class=\\\"example-form\\\" [formGroup]=\\\"signInForm\\\" (ngSubmit)=\\\"login(signInForm.value)\\\" >\\r\\n    <mat-card class=\\\"example-card\\\">\\r\\n     <mat-card-header>\\r\\n       <mat-card-title>Login</mat-card-title>\\r\\n     </mat-card-header>\\r\\n     <mat-card-content>\\r\\n       <div class=\\\"form-group\\\">\\r\\n           <mat-form-field class=\\\"example-full-width\\\">\\r\\n           <input matInput placeholder=\\\"Email ID\\\" formControlName=\\\"email\\\" name=\\\"email\\\">\\r\\n            <mat-error class=\\\"error--handing\\\"\\r\\n              *ngIf=\\\"signInForm.controls['email'].hasError('required') && (signInForm.controls['email'].dirty || signInForm.controls['email'].touched)\\\">\\r\\n              {{ \\\"Email Id is required.\\\" }}\\r\\n            </mat-error>\\r\\n            <mat-error class=\\\"error--handing\\\"\\r\\n              *ngIf=\\\"signInForm.controls['email'].hasError('pattern') && (signInForm.controls['email'].dirty || signInForm.controls['email'].touched)\\\">\\r\\n              {{ \\\"Please Enter valid email Id.\\\" }}\\r\\n            </mat-error>\\r\\n           </mat-form-field>\\r\\n         </div>\\r\\n         <div class=\\\"form-group\\\">\\r\\n           <mat-form-field class=\\\"example-full-width\\\">\\r\\n             <input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" formControlName=\\\"password\\\" >\\r\\n              <mat-error class=\\\"error--handing\\\"\\r\\n                *ngIf=\\\"signInForm.controls['password'].hasError('required') && (signInForm.controls['password'].dirty || signInForm.controls['password'].touched)\\\">\\r\\n                {{ \\\"Password is required\\\" }}\\r\\n              </mat-error>\\r\\n           </mat-form-field>\\r\\n         </div>\\r\\n       <mat-spinner [style.display]=\\\"showSpinner ? 'block' : 'none'\\\"></mat-spinner>\\r\\n     </mat-card-content>\\r\\n     <mat-card-actions>\\r\\n       <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"!signInForm.valid\\\" >Login</button>\\r\\n     </mat-card-actions>\\r\\n     <a class=\\\"auth-navigate\\\" [routerLink]=\\\"['/', 'forgot']\\\"  >Forgot Password?</a>\\r\\n   </mat-card>\\r\\n  </form>\\r\\n</div>\\r\\n\"","module.exports = \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container-fluid\\\">\\r\\n      <form class=\\\"example-form\\\" [formGroup]=\\\"resetform\\\" (ngSubmit)=\\\"reset(resetform.value)\\\" >\\r\\n    <mat-card class=\\\"example-card\\\">\\r\\n     <mat-card-header>\\r\\n       <mat-card-title>Reset Password</mat-card-title>\\r\\n     </mat-card-header>\\r\\n     <mat-card-content>\\r\\n         <div class=\\\"form-group\\\">\\r\\n           <mat-form-field class=\\\"example-full-width\\\">\\r\\n             <input matInput placeholder=\\\"New Password\\\" formControlName=\\\"password\\\" type=\\\"password\\\" name=\\\"password\\\">\\r\\n             <mat-error class=\\\"error--handing\\\"\\r\\n             *ngIf=\\\"resetform.controls['password'].hasError('required') && (resetform.controls['password'].dirty || resetform.controls['password'].touched)\\\">\\r\\n             {{ \\\"Password Id is required.\\\" }}\\r\\n           </mat-error>\\r\\n           <mat-error class=\\\"required\\\" *ngIf=\\\"resetform.controls['password'].hasError('pattern') && (resetform.controls['password'].dirty || resetform.controls['password'].touched )\\\">\\r\\n            {{ \\\"New Password must be minimum 6 charecter long.\\\" }}\\r\\n            </mat-error>\\r\\n           </mat-form-field>\\r\\n         </div>\\r\\n         <div class=\\\"form-group\\\">\\r\\n           <mat-form-field class=\\\"example-full-width\\\">\\r\\n             <input matInput placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirmPassword\\\" type=\\\"password\\\" name=\\\"cofirmpassword\\\" >\\r\\n             <mat-error class=\\\"error--handing\\\"\\r\\n             *ngIf=\\\"resetform.controls['confirmPassword'].hasError('required') && (resetform.controls['confirmPassword'].dirty || resetform.controls['confirmPassword'].touched)\\\">\\r\\n             {{ \\\"Password Id is required.\\\" }}\\r\\n           </mat-error>\\r\\n           <mat-error class=\\\"error--handing\\\" *ngIf=\\\"resetform.controls['confirmPassword'].hasError('passwordCompare') && resetform.controls['confirmPassword'].touched\\\">\\r\\n              {{ \\\"Password does not match.\\\" }}\\r\\n            </mat-error>\\r\\n           </mat-form-field>\\r\\n         </div>\\r\\n       <mat-spinner [style.display]=\\\"showSpinner ? 'block' : 'none'\\\"></mat-spinner>\\r\\n     </mat-card-content>\\r\\n     <mat-card-actions>\\r\\n       <button mat-raised-button [disabled]=\\\"!resetform.valid\\\" color=\\\"primary\\\">Reset Password</button>\\r\\n     </mat-card-actions>\\r\\n     <a class=\\\"auth-navigate\\\" [routerLink]=\\\"['/', 'login']\\\">Back to login</a>\\r\\n   </mat-card>\\r\\n  </form>\\r\\n</div>\\r\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvZm9yZ290L2ZvcmdvdC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router'\r\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { APIService } from 'app/api.service'\r\nimport { MatSnackBar } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-forgot',\r\n  templateUrl: './forgot.component.html',\r\n  styleUrls: ['./forgot.component.css']\r\n})\r\nexport class ForgotComponent implements OnInit {\r\n  public forgotForm: FormGroup;\r\n  constructor(private router: Router, private fb: FormBuilder, private api:APIService, private snack: MatSnackBar) { }\r\n\r\n  ngOnInit() {\r\n    if(this.api.isLoggedIn()){\r\n      this.router.navigate(['/', 'admin', 'dashboard'])\r\n    }\r\n    // inisiate from\r\n    this.forgotForm = this.fb.group ( {\r\n      email: [null, Validators.compose([Validators.required, Validators.pattern(/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/i)])]\r\n    });\r\n  }\r\n\r\n  forgot(userData:any) {\r\n    console.log('userData',userData);\r\n    this.api.apiRequest('post', \"auth/adminForgotPassword\", userData).subscribe(result => {\r\n      if(result.status == \"success\"){\r\n        this.router.navigate(['/', 'login'])    \r\n        this.snack.open(result.data, 'OK', { duration: 5000 })\r\n      } else {\r\n        this.snack.open(result.data, 'OK', { duration: 5000 })\r\n      }\r\n    }, (err) => {\r\n      this.snack.open(\"some things want to wrong. Try agin!\", 'OK', { duration: 5000 })\r\n    })\r\n  }\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router'\r\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\r\nimport { APIService } from 'app/api.service'\r\nimport { MatSnackBar } from '@angular/material';\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public signInForm: FormGroup;\r\n  showSpinner = false\r\n  constructor(private router: Router, private fb: FormBuilder, private api:APIService, private snack: MatSnackBar) { }\r\n\r\n  ngOnInit() {\r\n    if(this.api.isLoggedIn()){\r\n      this.router.navigate(['/', 'admin', 'dashboard'])\r\n    }\r\n    this.signInForm = this.fb.group ( {\r\n      email: [null, Validators.compose([Validators.required, Validators.pattern(/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/i)])] ,\r\n      password: [null , Validators.compose([Validators.required])]\r\n  });\r\n  localStorage.clear()\r\n  sessionStorage.clear()\r\n  }\r\n\r\n  login( userData:any ) {\r\n   // this.showSpinner = true;\r\n    // api request for login.\r\n\r\n    this.api.login(userData).subscribe(result => {\r\n      if (result.status == \"success\") {\r\n        this.router.navigate(['/', 'admin', 'dashboard'])    \r\n      } else {\r\n        this.snack.open(\"Please check your credentials and try again. \", 'OK', { duration: 5000 })\r\n      }\r\n    }, (err) => {\r\n      console.error(err)\r\n    })\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcmVzZXQvcmVzZXQuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute, Params} from '@angular/router'\r\nimport { FormBuilder, FormGroup, Validators, FormControl, AbstractControl} from '@angular/forms';\r\nimport { APIService } from 'app/api.service'\r\nimport { MatSnackBar } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-reset',\r\n  templateUrl: './reset.component.html',\r\n  styleUrls: ['./reset.component.css']\r\n})\r\nexport class ResetComponent implements OnInit {\r\n\r\n  public resetform: FormGroup;\r\n  userId: string = \"\"\r\n  passwordRegex: any = /^.{6,}$/\r\n  constructor(private api:APIService, private fb: FormBuilder, private snack: MatSnackBar, private router: Router, private activatedRoute: ActivatedRoute) {}\r\n\r\n  ngOnInit() {\r\n    if(this.api.isLoggedIn()){\r\n      this.router.navigate(['/', 'admin', 'dashboard'])\r\n    }\r\n    this.resetform = this.fb.group( {\r\n      password: [null, Validators.compose([ Validators.required, Validators.pattern(this.passwordRegex) ])],\r\n      confirmPassword: [null, Validators.compose([ Validators.required ])],\r\n    }, {\r\n      validator: this.comparePassword // your validation method\r\n    });\r\n\r\n    this.activatedRoute.params.subscribe((params: Params) => {\r\n      this.userId = params.id\r\n      console.log(this.userId)\r\n    })\r\n  }\r\n\r\n   // compare password validate\r\n   comparePassword(control: AbstractControl){\r\n    let password = control.get('password').value\r\n    let confirmPassword = control.get('confirmPassword').value\r\n    if (password !== confirmPassword) {\r\n        control.get('confirmPassword').setErrors( {passwordCompare: true} )\r\n    }else{\r\n      return null;\r\n    }\r\n  }\r\n\r\n  reset(userData:any) {\r\n    userData.userId = this.userId;\r\n    this.api.apiRequest('post', 'auth/adminResetPassword', userData).subscribe(result => {\r\n      if(result.status == \"success\"){\r\n        this.snack.open(\"Your password sucessfully reste. Now login with this password!\", 'OK', { duration: 5000 })\r\n        this.router.navigate (['', 'login']);\r\n      } else {\r\n        this.snack.open(result.data.message, 'OK', { duration: 5000 })\r\n      }\r\n    }, (err) => {\r\n      console.error(err)\r\n    })\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AuthLayoutRoutes } from './auth-layout.routing';\nimport { LoginComponent } from '../../auth/login/login.component';\nimport { ForgotComponent } from '../../auth/forgot/forgot.component';\nimport { ResetComponent } from '../../auth/reset/reset.component';\n\nimport {\n  MatButtonModule,\n  MatInputModule,\n  MatRippleModule,\n  MatFormFieldModule,\n  MatTooltipModule,\n  MatSelectModule,\n  MatCardModule,\n  MatProgressSpinnerModule\n} from '@angular/material';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(AuthLayoutRoutes),\n    FormsModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatRippleModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatTooltipModule,\n    MatCardModule,\n    MatProgressSpinnerModule\n  ],\n  declarations: [\n    LoginComponent,\n    ForgotComponent,\n    ResetComponent,\n  ]\n})\n\nexport class AuthLayoutModule {}\n","import { Routes } from '@angular/router';\n\nimport { LoginComponent } from '../../auth/login/login.component';\nimport { ForgotComponent } from '../../auth/forgot/forgot.component';\nimport { ResetComponent } from '../../auth/reset/reset.component';\n\nexport const AuthLayoutRoutes: Routes = [\n    { path: 'login',      component: LoginComponent },\n    { path: 'forgot',     component: ForgotComponent },\n    { path: 'reset/:id',  component: ResetComponent },\n];\n"],"sourceRoot":""}