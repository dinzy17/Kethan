{"version":3,"sources":["webpack:///./src/app/auth/forgot/forgot.component.html","webpack:///./src/app/auth/login/login.component.html","webpack:///./src/app/auth/reset/reset.component.html","webpack:///./src/app/auth/forgot/forgot.component.css","webpack:///./src/app/auth/forgot/forgot.component.ts","webpack:///./src/app/auth/login/login.component.css","webpack:///./src/app/auth/login/login.component.ts","webpack:///./src/app/auth/reset/reset.component.css","webpack:///./src/app/auth/reset/reset.component.ts","webpack:///./src/app/layouts/auth-layout/auth-layout.module.ts","webpack:///./src/app/layouts/auth-layout/auth-layout.routing.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2vBAA2vB,6BAA6B,wPAAwP,oCAAoC,2c;;;;;;;;;;;ACApjC,wwBAAwwB,6BAA6B,wPAAwP,oCAAoC,8fAA8f,4BAA4B,md;;;;;;;;;;;ACA3lD,2jBAA2jB,WAAW,sfAAsf,gCAAgC,sOAAsO,sDAAsD,gjBAAgjB,gCAAgC,yNAAyN,gCAAgC,kd;;;;;;;;;;;ACAjsE,+DAA+D,mJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAb;AACV;AACyC;AACrC;AACI;AAOhD;IAEE,yBAAoB,MAAc,EAAU,EAAe,EAAU,GAAc,EAAU,KAAkB;QAA3F,WAAM,GAAN,MAAM,CAAQ;QAAU,OAAE,GAAF,EAAE,CAAa;QAAU,QAAG,GAAH,GAAG,CAAW;QAAU,UAAK,GAAL,KAAK,CAAa;IAAI,CAAC;IAEpH,kCAAQ,GAAR;QACE,IAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,EAAC;YACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;SAClD;QACD,gBAAgB;QAChB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAG;YAChC,KAAK,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,mDAAmD,CAAC,CAAC,CAAC,CAAC;SAClI,CAAC,CAAC;IACL,CAAC;IAED,gCAAM,GAAN,UAAO,QAAY;QAAnB,iBAYC;QAXC,OAAO,CAAC,GAAG,CAAC,UAAU,EAAC,QAAQ,CAAC,CAAC;QACjC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,0BAA0B,EAAE,QAAQ,CAAC,CAAC,SAAS,CAAC,gBAAM;YAChF,IAAG,MAAM,CAAC,MAAM,IAAI,SAAS,EAAC;gBAC5B,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;gBACpC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;aACvD;iBAAM;gBACL,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;aACvD;QACH,CAAC,EAAE,UAAC,GAAG;YACL,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,sCAAsC,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QACnF,CAAC,CAAC;IACJ,CAAC;IA1BU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;YACtB,yJAAsC;;SAEvC,CAAC;yCAG4B,sDAAM,EAAc,0DAAW,EAAc,0DAAU,EAAiB,6DAAW;OAFpG,eAAe,CA2B3B;IAAD,sBAAC;CAAA;AA3B2B;;;;;;;;;;;;ACX5B,+DAA+D,+I;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAF;AACrB;AACyC;AACrC;AACI;AAMhD;IAIE,wBAAoB,MAAc,EAAU,EAAe,EAAU,GAAc,EAAU,KAAkB;QAA3F,WAAM,GAAN,MAAM,CAAQ;QAAU,OAAE,GAAF,EAAE,CAAa;QAAU,QAAG,GAAH,GAAG,CAAW;QAAU,UAAK,GAAL,KAAK,CAAa;QAD/G,gBAAW,GAAG,KAAK;IACgG,CAAC;IAEpH,iCAAQ,GAAR;QACE,IAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,EAAC;YACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;SAClD;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAG;YAChC,KAAK,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,mDAAmD,CAAC,CAAC,CAAC,CAAC;YACjI,QAAQ,EAAE,CAAC,IAAI,EAAG,yDAAU,CAAC,OAAO,CAAC,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC/D,CAAC,CAAC;QACH,YAAY,CAAC,KAAK,EAAE;QACpB,cAAc,CAAC,KAAK,EAAE;IACtB,CAAC;IAED,8BAAK,GAAL,UAAO,QAAY;QAClB,2BAA2B;QAC1B,yBAAyB;QAF3B,iBAeC;QAXC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,gBAAM;YACvC,IAAI,MAAM,CAAC,MAAM,IAAI,SAAS,EAAE;gBAC9B,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;aAClD;iBAAM;gBACL,KAAI,CAAC,SAAS,CAAC,SAAS,EAAE;gBAC1B,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,qDAAqD,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;aACjG;QACH,CAAC,EAAE,UAAC,GAAG;YACL,KAAI,CAAC,SAAS,CAAC,SAAS,EAAE;YAC1B,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;QACpB,CAAC,CAAC;IACJ,CAAC;IAhCwC;QAAxC,+DAAS,CAAC,WAAW,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC,CAAC;;qDAAW;IADxC,cAAc;QAL1B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,sJAAqC;;SAEtC,CAAC;yCAK4B,sDAAM,EAAc,0DAAW,EAAc,0DAAU,EAAiB,6DAAW;OAJpG,cAAc,CAmC1B;IAAD,qBAAC;CAAA;AAnC0B;;;;;;;;;;;;ACV3B,+DAA+D,+I;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAb;AACa;AACkC;AACrD;AACI;AAOhD;IAME,wBAAoB,GAAc,EAAU,EAAe,EAAU,KAAkB,EAAU,MAAc,EAAU,cAA8B;QAAnI,QAAG,GAAH,GAAG,CAAW;QAAU,OAAE,GAAF,EAAE,CAAa;QAAU,UAAK,GAAL,KAAK,CAAa;QAAU,WAAM,GAAN,MAAM,CAAQ;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAHvJ,WAAM,GAAW,EAAE;QACnB,YAAO,GAAW,EAAE;QACpB,kBAAa,GAAQ,SAAS;IAC4H,CAAC;IAE3J,iCAAQ,GAAR;QAAA,iBAgBC;QAfC,IAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,EAAC;YACvB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;SAClD;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAE;YAC9B,KAAK,EAAC,CAAC,EAAE,CAAC;YACV,QAAQ,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAE,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAE,CAAC,CAAC;YACrG,eAAe,EAAE,CAAC,IAAI,EAAE,yDAAU,CAAC,OAAO,CAAC,CAAE,yDAAU,CAAC,QAAQ,CAAE,CAAC,CAAC;SACrE,EAAE;YACD,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,yBAAyB;SAC1D,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,UAAC,MAAc;YAClD,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,EAAE;QACzB,CAAC,CAAC;QACF,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IAEA,4BAA4B;IAC5B,wCAAe,GAAf,UAAgB,OAAwB;QACvC,IAAI,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,KAAK;QAC5C,IAAI,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,KAAK;QAC1D,IAAI,QAAQ,KAAK,eAAe,EAAE;YAC9B,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,SAAS,CAAE,EAAC,eAAe,EAAE,IAAI,EAAC,CAAE;SACtE;aAAI;YACH,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAED,iCAAQ,GAAR;QAAA,iBAUC;QATC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,mBAAmB,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,SAAS,CAAC,gBAAM;YACxF,IAAG,MAAM,CAAC,MAAM,IAAI,SAAS,EAAE;gBAC7B,KAAI,CAAC,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;aAClC;iBAAM;gBACL,iEAAiE;aAClE;QACH,CAAC,EAAE,UAAC,GAAG;YACL,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;QACpB,CAAC,CAAC;IACJ,CAAC;IAED,8BAAK,GAAL,UAAM,QAAY;QAAlB,iBAcC;QAbC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAC9B,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,yBAAyB,EAAE,QAAQ,CAAC,CAAC,SAAS,CAAC,gBAAM;YAC/E,IAAG,MAAM,CAAC,MAAM,IAAI,SAAS,EAAC;gBAC5B,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gEAAgE,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;gBAC3G,IAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,IAAI,WAAW,EAAC;oBACrC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAE,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;iBACtC;aACF;iBAAM;gBACL,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;aAC/D;QACH,CAAC,EAAE,UAAC,GAAG;YACL,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;QACpB,CAAC,CAAC;IACJ,CAAC;IA/DU,cAAc;QAL1B,+DAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,sJAAqC;;SAEtC,CAAC;yCAOwB,0DAAU,EAAc,0DAAW,EAAiB,6DAAW,EAAkB,sDAAM,EAA0B,8DAAc;OAN5I,cAAc,CAgE1B;IAAD,qBAAC;CAAA;AAhE0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACXc;AACM;AACA;AACmB;AACT;AACS;AACG;AACH;AAWvC;AAuB3B;IAAA;IAA+B,CAAC;IAAnB,gBAAgB;QAtB5B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,4DAAY,CAAC,QAAQ,CAAC,qEAAgB,CAAC;gBACvC,0DAAW;gBACX,kEAAmB;gBACnB,iEAAe;gBACf,iEAAe;gBACf,oEAAkB;gBAClB,gEAAc;gBACd,iEAAe;gBACf,kEAAgB;gBAChB,+DAAa;gBACb,0EAAwB;aACzB;YACD,YAAY,EAAE;gBACZ,0EAAc;gBACd,6EAAe;gBACf,0EAAc;aACf;SACF,CAAC;OAEW,gBAAgB,CAAG;IAAD,uBAAC;CAAA;AAAH;;;;;;;;;;;;;ACvC7B;AAAA;AAAA;AAAA;AAAA;AAAkE;AACG;AACH;AAE3D,IAAM,gBAAgB,GAAW;IACpC,EAAE,IAAI,EAAE,OAAO,EAAO,SAAS,EAAE,0EAAc,EAAE;IACjD,EAAE,IAAI,EAAE,QAAQ,EAAM,SAAS,EAAE,6EAAe,EAAE;IAClD,EAAE,IAAI,EAAE,WAAW,EAAG,SAAS,EAAE,0EAAc,EAAE;CACpD,CAAC","file":"layouts-auth-layout-auth-layout-module.js","sourcesContent":["module.exports = \"<div class=\\\"main-content\\\">\\n  <div class=\\\"container-fluid\\\">\\n  <form class=\\\"example-form\\\" [formGroup]=\\\"forgotForm\\\" (ngSubmit)=\\\"forgot(forgotForm.value)\\\">\\n    <mat-card class=\\\"example-card\\\">\\n     <mat-card-header>\\n       <mat-card-title>Forgot Password</mat-card-title>\\n     </mat-card-header>\\n     <mat-card-content>\\n         <div class=\\\"form-group\\\">\\n           <mat-form-field class=\\\"example-full-width\\\">\\n           <input matInput placeholder=\\\"Email ID\\\" formControlName=\\\"email\\\" name=\\\"email\\\">\\n           <mat-error class=\\\"error--handing\\\"\\n              *ngIf=\\\"forgotForm.controls['email'].hasError('required') && (forgotForm.controls['email'].dirty || forgotForm.controls['email'].touched)\\\">\\n              {{ \\\"Email Id is required.\\\" }}\\n            </mat-error>\\n            <mat-error class=\\\"error--handing\\\"\\n              *ngIf=\\\"forgotForm.controls['email'].hasError('pattern') && (forgotForm.controls['email'].dirty || forgotForm.controls['email'].touched)\\\">\\n              {{ \\\"Please Enter valid email Id.\\\" }}\\n            </mat-error>\\n           </mat-form-field>\\n         </div>\\n       <mat-spinner [style.display]=\\\"showSpinner ? 'block' : 'none'\\\"></mat-spinner>\\n     </mat-card-content>\\n     <mat-card-actions>\\n       <button mat-raised-button [disabled]=\\\"!forgotForm.valid\\\" color=\\\"primary\\\">Submit</button>\\n     </mat-card-actions>\\n     <a class=\\\"auth-navigate\\\" [routerLink]=\\\"['/', 'login']\\\">Back to login</a>\\n   </mat-card>\\n  </form>\\n</div>\\n\"","module.exports = \"<div class=\\\"main-content\\\">\\n  <div class=\\\"container-fluid\\\">\\n    <form class=\\\"example-form\\\" [formGroup]=\\\"signInForm\\\" (ngSubmit)=\\\"login(signInForm.value)\\\" #loginform=\\\"ngForm\\\" >\\n    <mat-card class=\\\"example-card\\\">\\n     <mat-card-header>\\n       <mat-card-title>Login</mat-card-title>\\n     </mat-card-header>\\n     <mat-card-content>\\n       <div class=\\\"form-group\\\">\\n           <mat-form-field class=\\\"example-full-width\\\">\\n           <input matInput placeholder=\\\"Email ID\\\" formControlName=\\\"email\\\" name=\\\"email\\\">\\n            <mat-error class=\\\"error--handing\\\"\\n              *ngIf=\\\"signInForm.controls['email'].hasError('required') && (signInForm.controls['email'].dirty || signInForm.controls['email'].touched)\\\">\\n              {{ \\\"Email Id is required.\\\" }}\\n            </mat-error>\\n            <mat-error class=\\\"error--handing\\\"\\n              *ngIf=\\\"signInForm.controls['email'].hasError('pattern') && (signInForm.controls['email'].dirty || signInForm.controls['email'].touched)\\\">\\n              {{ \\\"Please Enter valid email Id.\\\" }}\\n            </mat-error>\\n           </mat-form-field>\\n         </div>\\n         <div class=\\\"form-group\\\">\\n           <mat-form-field class=\\\"example-full-width\\\">\\n             <input matInput placeholder=\\\"Password\\\" type=\\\"password\\\" formControlName=\\\"password\\\" >\\n              <mat-error class=\\\"error--handing\\\"\\n                *ngIf=\\\"signInForm.controls['password'].hasError('required') && (signInForm.controls['password'].dirty || signInForm.controls['password'].touched)\\\">\\n                {{ \\\"Password is required\\\" }}\\n              </mat-error>\\n           </mat-form-field>\\n         </div>\\n       <mat-spinner [style.display]=\\\"showSpinner ? 'block' : 'none'\\\"></mat-spinner>\\n     </mat-card-content>\\n     <mat-card-actions>\\n       <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"!signInForm.valid\\\" >Login</button>\\n     </mat-card-actions>\\n     <a class=\\\"auth-navigate\\\" [routerLink]=\\\"['/', 'forgot']\\\"  >Forgot Password?</a>\\n   </mat-card>\\n  </form>\\n</div>\\n\"","module.exports = \"<div class=\\\"main-content\\\">\\n  <div class=\\\"container-fluid\\\">\\n      <form class=\\\"example-form\\\" [formGroup]=\\\"resetform\\\" (ngSubmit)=\\\"reset(resetform.value)\\\" >\\n    <mat-card class=\\\"example-card\\\">\\n     <mat-card-header>\\n       <mat-card-title>Reset Password</mat-card-title>\\n     </mat-card-header>\\n     <mat-card-content>\\n\\n        <div class=\\\"form-group\\\">\\n            <mat-form-field class=\\\"example-full-width\\\">\\n              <input matInput placeholder=\\\"Email\\\" readonly disabled formControlName=\\\"email\\\" type=\\\"text\\\" value=\\\"{{ emailId }}\\\">\\n            </mat-form-field>\\n          </div>\\n\\n         <div class=\\\"form-group\\\">\\n           <mat-form-field class=\\\"example-full-width\\\">\\n             <input matInput placeholder=\\\"New Password\\\" formControlName=\\\"password\\\" type=\\\"password\\\" name=\\\"password\\\">\\n             <mat-error class=\\\"error--handing\\\"\\n             *ngIf=\\\"resetform.controls['password'].hasError('required') && (resetform.controls['password'].dirty || resetform.controls['password'].touched)\\\">\\n             {{ \\\"Password Id is required.\\\" }}\\n           </mat-error>\\n           <mat-error class=\\\"required\\\" *ngIf=\\\"resetform.controls['password'].hasError('pattern') && (resetform.controls['password'].dirty || resetform.controls['password'].touched )\\\">\\n            {{ \\\"New Password must be minimum 6 charecter long.\\\" }}\\n            </mat-error>\\n           </mat-form-field>\\n         </div>\\n         <div class=\\\"form-group\\\">\\n           <mat-form-field class=\\\"example-full-width\\\">\\n             <input matInput placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirmPassword\\\" type=\\\"password\\\" name=\\\"cofirmpassword\\\" >\\n             <mat-error class=\\\"error--handing\\\"\\n             *ngIf=\\\"resetform.controls['confirmPassword'].hasError('required') && (resetform.controls['confirmPassword'].dirty || resetform.controls['confirmPassword'].touched)\\\">\\n             {{ \\\"Password Id is required.\\\" }}\\n           </mat-error>\\n           <mat-error class=\\\"error--handing\\\" *ngIf=\\\"resetform.controls['confirmPassword'].hasError('passwordCompare') && resetform.controls['confirmPassword'].touched\\\">\\n              {{ \\\"Password does not match.\\\" }}\\n            </mat-error>\\n           </mat-form-field>\\n         </div>\\n       <mat-spinner [style.display]=\\\"showSpinner ? 'block' : 'none'\\\"></mat-spinner>\\n     </mat-card-content>\\n     <mat-card-actions>\\n       <button mat-raised-button [disabled]=\\\"!resetform.valid\\\" color=\\\"primary\\\">Reset Password</button>\\n     </mat-card-actions>\\n     <a class=\\\"auth-navigate\\\" [routerLink]=\\\"['/', 'login']\\\">Back to login</a>\\n   </mat-card>\\n  </form>\\n</div>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvZm9yZ290L2ZvcmdvdC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router'\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { APIService } from 'app/api.service'\nimport { MatSnackBar } from '@angular/material';\n\n@Component({\n  selector: 'app-forgot',\n  templateUrl: './forgot.component.html',\n  styleUrls: ['./forgot.component.css']\n})\nexport class ForgotComponent implements OnInit {\n  public forgotForm: FormGroup;\n  constructor(private router: Router, private fb: FormBuilder, private api:APIService, private snack: MatSnackBar) { }\n\n  ngOnInit() {\n    if(this.api.isLoggedIn()){\n      this.router.navigate(['/', 'admin', 'dashboard'])\n    }\n    // inisiate from\n    this.forgotForm = this.fb.group ( {\n      email: [null, Validators.compose([Validators.required, Validators.pattern(/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/i)])]\n    });\n  }\n\n  forgot(userData:any) {\n    console.log('userData',userData);\n    this.api.apiRequest('post', \"auth/adminForgotPassword\", userData).subscribe(result => {\n      if(result.status == \"success\"){\n        this.router.navigate(['/', 'login'])    \n        this.snack.open(result.data, 'OK', { duration: 5000 })\n      } else {\n        this.snack.open(result.data, 'OK', { duration: 5000 })\n      }\n    }, (err) => {\n      this.snack.open(\"some things want to wrong. Try agin!\", 'OK', { duration: 5000 })\n    })\n  }\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router'\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { APIService } from 'app/api.service'\nimport { MatSnackBar } from '@angular/material';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  @ViewChild('loginform', {static: false}) loginform;\n  public signInForm: FormGroup;\n  showSpinner = false\n  constructor(private router: Router, private fb: FormBuilder, private api:APIService, private snack: MatSnackBar) { }\n\n  ngOnInit() {\n    if(this.api.isLoggedIn()){\n      this.router.navigate(['/', 'admin', 'dashboard'])\n    }\n    this.signInForm = this.fb.group ( {\n      email: [null, Validators.compose([Validators.required, Validators.pattern(/^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$/i)])] ,\n      password: [null , Validators.compose([Validators.required])]\n  });\n  localStorage.clear()\n  sessionStorage.clear()\n  }\n\n  login( userData:any ) {\n   // this.showSpinner = true;\n    // api request for login.\n\n    this.api.login(userData).subscribe(result => {\n      if (result.status == \"success\") {\n        this.router.navigate(['/', 'admin', 'dashboard'])    \n      } else {\n        this.loginform.resetForm()\n        this.snack.open(\"Please check your login credentials and try again. \", 'OK', { duration: 5000 })\n      }\n    }, (err) => {\n      this.loginform.resetForm()\n      console.error(err)\n    })\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2F1dGgvcmVzZXQvcmVzZXQuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, Params} from '@angular/router'\nimport { FormBuilder, FormGroup, Validators, FormControl, AbstractControl} from '@angular/forms';\nimport { APIService } from 'app/api.service'\nimport { MatSnackBar } from '@angular/material';\n\n@Component({\n  selector: 'app-reset',\n  templateUrl: './reset.component.html',\n  styleUrls: ['./reset.component.css']\n})\nexport class ResetComponent implements OnInit {\n\n  public resetform: FormGroup;\n  userId: string = \"\"\n  emailId: string = \"\"\n  passwordRegex: any = /^.{6,}$/\n  constructor(private api:APIService, private fb: FormBuilder, private snack: MatSnackBar, private router: Router, private activatedRoute: ActivatedRoute) {}\n\n  ngOnInit() {\n    if(this.api.isLoggedIn()){\n      this.router.navigate(['/', 'admin', 'dashboard'])\n    }\n    this.resetform = this.fb.group( {\n      email:[''],\n      password: [null, Validators.compose([ Validators.required, Validators.pattern(this.passwordRegex) ])],\n      confirmPassword: [null, Validators.compose([ Validators.required ])],\n    }, {\n      validator: this.comparePassword // your validation method\n    });\n\n    this.activatedRoute.params.subscribe((params: Params) => {\n      this.userId = params.id\n    })\n    this.getEmail();\n  }\n\n   // compare password validate\n   comparePassword(control: AbstractControl){\n    let password = control.get('password').value\n    let confirmPassword = control.get('confirmPassword').value\n    if (password !== confirmPassword) {\n        control.get('confirmPassword').setErrors( {passwordCompare: true} )\n    }else{\n      return null;\n    }\n  }\n\n  getEmail(){\n    this.api.apiRequest('post', 'auth/getUserEmail', { userId: this.userId }).subscribe(result => {\n      if(result.status == \"success\") {\n        this.emailId = result.data.email;\n      } else {\n        //this.snack.open(result.data.message, 'OK', { duration: 5000 });\n      }\n    }, (err) => {\n      console.error(err)\n    })\n  }\n\n  reset(userData:any) {\n    userData.userId = this.userId;\n    this.api.apiRequest('post', 'auth/adminResetPassword', userData).subscribe(result => {\n      if(result.status == \"success\"){\n        this.snack.open(\"Your password sucessfully reste. Now login with this password!\", 'OK', { duration: 5000 })\n        if(result.data.userType == \"adminUser\"){\n          this.router.navigate (['', 'login']);\n        }\n      } else {\n        this.snack.open(result.data.message, 'OK', { duration: 5000 })\n      }\n    }, (err) => {\n      console.error(err)\n    })\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AuthLayoutRoutes } from './auth-layout.routing';\nimport { LoginComponent } from '../../auth/login/login.component';\nimport { ForgotComponent } from '../../auth/forgot/forgot.component';\nimport { ResetComponent } from '../../auth/reset/reset.component';\n\nimport {\n  MatButtonModule,\n  MatInputModule,\n  MatRippleModule,\n  MatFormFieldModule,\n  MatTooltipModule,\n  MatSelectModule,\n  MatCardModule,\n  MatProgressSpinnerModule\n} from '@angular/material';\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(AuthLayoutRoutes),\n    FormsModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatRippleModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatTooltipModule,\n    MatCardModule,\n    MatProgressSpinnerModule\n  ],\n  declarations: [\n    LoginComponent,\n    ForgotComponent,\n    ResetComponent,\n  ]\n})\n\nexport class AuthLayoutModule {}\n","import { Routes } from '@angular/router';\n\nimport { LoginComponent } from '../../auth/login/login.component';\nimport { ForgotComponent } from '../../auth/forgot/forgot.component';\nimport { ResetComponent } from '../../auth/reset/reset.component';\n\nexport const AuthLayoutRoutes: Routes = [\n    { path: 'login',      component: LoginComponent },\n    { path: 'forgot',     component: ForgotComponent },\n    { path: 'reset/:id',  component: ResetComponent },\n];\n"],"sourceRoot":""}